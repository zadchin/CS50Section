[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS50 Section Notes",
    "section": "",
    "text": "Preface\nThis website contains section notes for COMPSCI 50, an Introduction to Computer Science course at Harvard University taught by Professor David Malan. These notes are created by Zad Chin."
  },
  {
    "objectID": "index.html#logistics",
    "href": "index.html#logistics",
    "title": "CS50 Section Notes",
    "section": "Logistics",
    "text": "Logistics\n\nCourse Website\nSections: 7:00 - 8:20 pm EDT on Fridays at Zoom\nOffice Hours: 7:00 - 8:20 pm EDTon Fridays at Zoom\nManual Pages : website here\nEdStem Discussion: Ed link"
  },
  {
    "objectID": "index.html#notes",
    "href": "index.html#notes",
    "title": "CS50 Section Notes",
    "section": "Notes",
    "text": "Notes\nThese section notes will be presented as an online book, and the source for this book at https://zadchin.github.io/CS50Section/. Any typos or errors can be reported at https://github.com/zadchin/CS50Section/issues. Thanks for reading.\nThis is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books.\n\\(\\,\\)"
  },
  {
    "objectID": "01_Section_1.html#this-week",
    "href": "01_Section_1.html#this-week",
    "title": "Section 1",
    "section": "This Week",
    "text": "This Week\nIn this section, we will discuss:\n\nVariables\nTypes\nLoops\nConditions\nFunctions"
  },
  {
    "objectID": "01_Section_1.html#slides",
    "href": "01_Section_1.html#slides",
    "title": "Section 1",
    "section": "Slides",
    "text": "Slides\nSlides deck are available here: Slide Section 1"
  },
  {
    "objectID": "01_Section_1.html#next-week",
    "href": "01_Section_1.html#next-week",
    "title": "Section 1",
    "section": "Next Week",
    "text": "Next Week\nNext week, we will discuss:\n\nArray\nString\nCommand Line Argument\n\n\\(\\,\\)"
  },
  {
    "objectID": "02_Section_2.html#this-week",
    "href": "02_Section_2.html#this-week",
    "title": "Section 2",
    "section": "This Week",
    "text": "This Week\nIn this section, we will discuss:\n\nArray\nString\nCommand Line Argument"
  },
  {
    "objectID": "02_Section_2.html#slides",
    "href": "02_Section_2.html#slides",
    "title": "Section 2",
    "section": "Slides",
    "text": "Slides\nSlides deck are available here: Slide Section 2"
  },
  {
    "objectID": "02_Section_2.html#section-practice-problems",
    "href": "02_Section_2.html#section-practice-problems",
    "title": "Section 2",
    "section": "Section Practice Problems",
    "text": "Section Practice Problems\n\nSection Problem 1\nBackground\nIn a classroom, a teacher keeps track of the attendance of students. Each student is assigned a seat number, and their attendance status is recorded as present (1) or absent (0) for a particular day.\nTask\nWrite a program in C that allows the teacher to enter the attendance status for each student and then displays the total number of students present and absent on that day.\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy and following the following code to a new C file in CS50 codespace to start coding!\n#include <cs50.h>\n#include <stdio.h>\n\n#define CLASS_SIZE 5\n\nint main(void) {\n    int attendance[CLASS_SIZE];\n    int present = 0;\n    int absent = 0;\n\n    // Ask the teacher to enter attendance\n    printf(\"Enter the attendance for each student (1 for present, 0 for absent):\\n\");\n    for (int i = 0; i < CLASS_SIZE; i++) {\n        // Use get_int() to get input from user\n        attendance[i] = get_int(\"Student %d: \", i + 1);\n        \n        // TODO: Add code to count presents and absents\n    }\n    \n    // TODO: Add code to display the total presents and absents\n    \n    return 0;\n}\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n#include <cs50.h>\n#include <stdio.h>\n\n#define CLASS_SIZE 10\n\nint main(void) {\n    int attendance[CLASS_SIZE];\n    int present = 0;\n    int absent = 0;\n\n    printf(\"Enter the attendance for each student (1 for present, 0 for absent):\\n\");\n    for (int i = 0; i < CLASS_SIZE; i++) {\n        // Use get_int() to get input from user\n        attendance[i] = get_int(\"Student %d: \", i + 1);\n        \n        // Tally presents and absents\n        if (attendance[i] == 1) {\n            present++;\n        } \n        else if (attendance[i] == 0)  {\n            absent++;\n        }\n        else {\n            printf(\"Error: Attendance needs to be 0 or 1 \\n\");\n            return 1;\n        }\n    }\n\n    // Display the total presents and absents\n    printf(\"Total present: %d\\n\", present);\n    printf(\"Total absent: %d\\n\", absent);\n    \n    return 0;\n}\n\n\n\n\n\nSection Problem 2\nBackground\nGen Z often use acronyms to help remember lists or sequences, for example:\n\nYOLO- You only live once\nFOMO – Fear of missing out\nGOAT – Greatest of all time\n\nLet’s create a program that generates an acronym from a list of words.\nTask\nWrite a program in C that:\nAsks the user to input a certain number of words, stored in an array of strings. Generates an acronym by taking the first letter of each word and concatenating them. Converts the acronym to uppercase. Prints out the final acronym.\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy and following the following code to a new C file in CS50 codespace to start coding!\n#include <cs50.h>\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define WORD_COUNT 4 // Number of words in the acronym\n\nint main(void) {\n    string words[WORD_COUNT];\n    \n    //TODO: Initialize acronym\n\n    // Prompt user for words\n    for (int i = 0; i < WORD_COUNT; i++) {\n        words[i] = get_string(\"Enter word %d: \", i + 1);\n    }\n\n    // TODO: Generate the acronym from the first letter of each word\n    \n    // TODO: Print the acronym\n    \n    return 0;\n}\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n#include <cs50.h>\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define WORD_COUNT 4 // Number of words in the acronym\n\nint main(void) {\n    string words[WORD_COUNT];\n    char acronym[WORD_COUNT + 1]; // +1 for the null terminator\n\n    // Prompt user for words\n    for (int i = 0; i < WORD_COUNT; i++) {\n        words[i] = get_string(\"Enter word %d: \", i + 1);\n    }\n\n    // Generate the acronym from the first letter of each word\n    for (int i = 0; i < WORD_COUNT; i++) {\n        // Check if the first character is a letter\n        if (isalpha(words[i][0])) {\n            acronym[i] = toupper(words[i][0]);\n        } \n        else {\n            // Handle the case where the first character is not a letter\n            // Placeholder character or print error\n            acronym[i] = 'X';\n        }\n    }\n\n    // Null-terminate the acronym string\n    acronym[WORD_COUNT] = '\\0';\n\n    // Print the final acronym\n    printf(\"The acronym is: %s\\n\", acronym);\n    \n    return 0;\n}\n\n\n\n\n\n\nSection Problem 3\nBackground and Task\nFor the acronym generator, the words that form the acronym can be passed as command-line arguments. Recode the origin code files to take words from command-line arguments to create the acronym.\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy and following the following code to a new C file in CS50 codespace to start coding!\n#include <cs50.h>\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(int argc, string argv[]) {\n    // TODO: Fill up ... to make sure users give at least a certain argc\n    if (...) {\n        printf(\"Usage: ./acronym word1 word2 ... wordN\\n\");\n        return 1;\n    }\n\n    // TODO: Generate and print the acronym from command-line arguments\n    \n    return 0;\n}\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n#include <cs50.h>\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint main(int argc, string argv[]) {\n    if (argc < 2) {\n        printf(\"Usage: ./acronym word1 word2 ... wordN\\n\");\n        return 1;\n    }\n\n    for (int i = 1; i < argc; i++) {\n        if (isalpha(argv[i][0])) {\n            printf(\"%c\", toupper(argv[i][0]));\n        }\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}"
  },
  {
    "objectID": "02_Section_2.html#next-week",
    "href": "02_Section_2.html#next-week",
    "title": "Section 2",
    "section": "Next Week",
    "text": "Next Week\nNext week, we will discuss:\n\nStructures in C\nSorting\nSearching\nRecursion\n\nNote: I am out for the next section.Margaret Tanzosh will replace me for the section. Refer her materials.\n\\(\\,\\)"
  },
  {
    "objectID": "04_Section_4.html#this-week",
    "href": "04_Section_4.html#this-week",
    "title": "Section 4",
    "section": "This Week",
    "text": "This Week\nIn this section, we will discuss:\n\nPointers\nMemory Allocation (malloc)\nFile I/O"
  },
  {
    "objectID": "04_Section_4.html#slides",
    "href": "04_Section_4.html#slides",
    "title": "Section 4",
    "section": "Slides",
    "text": "Slides\nSlides deck are available here: Slide Section 4"
  },
  {
    "objectID": "04_Section_4.html#section-practice-problems",
    "href": "04_Section_4.html#section-practice-problems",
    "title": "Section 4",
    "section": "Section Practice Problems",
    "text": "Section Practice Problems\n\nSection Problem 1\nBackground\nWrite a function in C that swaps the values of two integers using pointers.\nTask\n\nUnderstanding pointers is crucial in C programming as they allow for efficient manipulation of variables and memory.\nThe swap function demonstrates a fundamental use of pointers to directly modify the values of variables at their memory addresses.\nInstead of swapping values using a third temporary variable, this function will directly exchange the values at the memory addresses pointed to by the pointers a and b.\n\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy and following the following code to a new C file in CS50 codespace to start coding!\n#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    // TODO: Implement the logic to swap the values of a and b\n}\n\n\nint main() {\n    int x = 10;\n    int y = 20;\n    \n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    //TODO: call on the function swap for x and y: swap(...)\n    \n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10;\n    int y = 20;\n    \n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n\n    return 0;\n}\n\n\n\n\n\nSection Problem 2\nBackground\nImplement a “Brightness Adjustment” filter that modifies the brightness of an image. This filter will either increase or decrease the brightness of every pixel in the image based on a given factor.\n\nBrightness is determined by the intensity of the RGB components of a pixel.\nIncreasing brightness involves adding a constant value to each color component (Red, Green, Blue) of a pixel.\nDecreasing brightness involves subtracting a constant value from each color component.\nIt’s crucial to ensure that the resulting color values are capped between 0 and 255.\n\nTask\nImplement a function adjust_brightness in helpers.c to increase or decrease the brightness of the image. The function should take an additional parameter, brightness_factor, to control the adjustment level.\nDemo\nWill be shown in section\nTo Test\n\nRun make filter\nRun this filter-practice/ $ ./filter -g images/yard.bmp out.bmp to see the original file in out.bmp\nRun this filter-practice/ $ ./filter -b images/yard.bmp out.bmp to see the adjusted brightness photo in out.bmp\n\n\n\n\n\n\n\nStarter Code\n\n\n\nDownload the starter code file here\n\n\n\n\n\n\n\n\nPseudocode\n\n\n\n\n\nfunction adjust_brightness(height, width, image, brightness_factor)\n    for each row in image\n        for each pixel in row\n            for each color component (red, green, blue) in pixel\n                new color value = original color value + brightness_factor\n                if new color value > 255\n                    new color value = 255\n                if new color value < 0\n                    new color value = 0\n                update pixel's color component with new color value\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSolution 1:\nvoid adjust_brightness(int height, int width, RGBTRIPLE image[height][width], int brightness_factor)\n{\n    for (int i = 0; i < height; i++)\n    {\n        for (int j = 0; j < width; j++)\n        {\n            image[i][j].rgbtRed = fmin(fmax(image[i][j].rgbtRed + brightness_factor, 0), 255);\n            image[i][j].rgbtGreen = fmin(fmax(image[i][j].rgbtGreen + brightness_factor, 0), 255);\n            image[i][j].rgbtBlue = fmin(fmax(image[i][j].rgbtBlue + brightness_factor, 0), 255);\n        }\n    }\n}\nSolution 2\nvoid adjust_brightness(int height, int width, RGBTRIPLE image[height][width], int brightness_factor)\n{\n    for (int i = 0; i < height; i++)\n    {\n        for (int j = 0; j < width; j++)\n        {\n            // Adjust Red, ensuring it remains within 0-255 range\n            int newRed = image[i][j].rgbtRed + brightness_factor;\n            image[i][j].rgbtRed = newRed > 255 ? 255 : (newRed < 0 ? 0 : newRed);\n\n            // Adjust Green, ensuring it remains within 0-255 range\n            int newGreen = image[i][j].rgbtGreen + brightness_factor;\n            image[i][j].rgbtGreen = newGreen > 255 ? 255 : (newGreen < 0 ? 0 : newGreen);\n\n            // Adjust Blue, ensuring it remains within 0-255 range\n            int newBlue = image[i][j].rgbtBlue + brightness_factor;\n            image[i][j].rgbtBlue = newBlue > 255 ? 255 : (newBlue < 0 ? 0 : newBlue);\n        }\n    }\n}"
  },
  {
    "objectID": "04_Section_4.html#homework-tips",
    "href": "04_Section_4.html#homework-tips",
    "title": "Section 4",
    "section": "Homework tips",
    "text": "Homework tips\nHomework tips are available in the slide: Slide Section 4"
  },
  {
    "objectID": "04_Section_4.html#next-week",
    "href": "04_Section_4.html#next-week",
    "title": "Section 4",
    "section": "Next Week",
    "text": "Next Week\nFor the following section, we will discuss:\n\nAlgorithms!\n\n\\(\\,\\)"
  },
  {
    "objectID": "05_Section_5.html#this-week",
    "href": "05_Section_5.html#this-week",
    "title": "Section 5",
    "section": "This Week",
    "text": "This Week\nIn this section, we will discuss:\n\nLinked List\nHash Tables\nQueue, Stack"
  },
  {
    "objectID": "05_Section_5.html#slides",
    "href": "05_Section_5.html#slides",
    "title": "Section 5",
    "section": "Slides",
    "text": "Slides\nSlides deck are available here: Slide Section 5"
  },
  {
    "objectID": "05_Section_5.html#section-practice-problems",
    "href": "05_Section_5.html#section-practice-problems",
    "title": "Section 5",
    "section": "Section Practice Problems",
    "text": "Section Practice Problems\n\nSection Problem 1\nBackground\nLinked lists are a fundamental data structure in computer science, often used to store sequences of elements. They consist of nodes, where each node contains a piece of data and a pointer to the next node in the list. This structure allows for efficient insertion and deletion of elements. Understanding pointers is crucial for managing linked lists, as they are used to navigate and modify the list structure.\nTask\nCreate a function that reverses a singly linked list. The list is represented by a struct named node, which contains an integer number and a pointer to the next node. Your task is to write a function void reverse(node **head) that takes a pointer to the head of the list and reverses the order of the nodes. The challenge is to manipulate the pointers in each node to reverse the order without creating any new nodes or losing any existing ones.\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy the code at here\n\n\n\n\n\n\n\n\nTips & Pseudocode\n\n\n\n\n\nExample in Words\nImagine a simple linked list: 1 -> 2 -> 3 -> null\n\nStart: prev = null, current = 1, next = null\nFirst Iteration:\n\nnext points to 2 (saving link to next node)\nReverse link: 1 <- current, but next (2) -> 3\nMove prev to 1, current to 2 (advance pointers)\nNow: null <- 1 <- current (2) -> 3\n\nSecond Iteration:\n\nnext points to 3\nReverse link: 2 <- current, but next (3) -> null\nMove prev to 2, current to 3\nNow: null <- 1 <- 2 <- current (3)\n\nFinal Iteration:\n\nnext is null (end of list)\nReverse link: 3 -> null\ncurrent becomes null, loop ends\nFinal list: null <- 1 <- 2 <- 3\n\n\nThe head of the list now points to 3, achieving the reversed list: 3 -> 2 -> 1 -> null\nPseudocode\n1. Initialize three pointers: prev (null), current (head of the list), and next (null).\n\n2. Loop while current is not null:\n - Set next to current->next (save the next node).\n - Redirect current->next to prev (reverse the link).\n - Move prev to current (advance prev up the list).\n - Move current to next (advance current up the list).\n \n3. After the loop, set the head of the list to prev.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nvoid reverse(node **head) {\n    node *prev = NULL;\n    node *current = *head;\n    node *next = NULL;\n\n    while (current != NULL) {\n        next = current->next;\n        current->next = prev;\n        prev = current;\n        current = next;\n    }\n    *head = prev;\n}\n\n\n\n\n\nSection Problem 2\nBackground\nHash tables are powerful data structures that allow for efficient data retrieval. They map keys to values, using a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. This exercise focuses on understanding how to search for items in a hash table, an essential operation known as a lookup.\nTask\nWrite a function, bool lookup(char* word, node* hashtable[], int size), that searches for a given word in a hash table. The hash table is represented as an array of linked lists (node* hashtable[]), and size is the number of buckets in the table. The function should return true if the word is found and false otherwise.\nDemo\nWill be shown in section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy the code at here\n\n\n\n\n\n\n\n\nPseudocode\n\n\n\n\n\n1. Hash the Word using the provided hash function: Use the hash function on the input word to determine the index in the hashtable.\n\n2. Traverse the Linked List: At the calculated index, traverse the linked list attached to that bucket.\n   - If the current node's word matches the input word, return True.\n   - If not, move to the next node in the list.\n\n3. Word Not Found: If the end of the list is reached without finding the word, return False.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSolution 1:\nbool lookup(const char* word, node* hashtable[]) {\n    unsigned int index = hash(word);\n    node *cursor = hashtable[index];\n    while (cursor != NULL) {\n        if (strcmp(cursor->word, word) == 0) {\n            return true;\n        }\n        cursor = cursor->next;\n    }\n    return false;\n}\nSolution 2\nbool lookup(const char* word, node* hashtable[]) {\n    unsigned int index = hash(word);\n\n    // Use a for loop to traverse the linked list\n    for (node *cursor = hashtable[index]; cursor != NULL; cursor = cursor->next) {\n        if (strcmp(cursor->word, word) == 0) {\n            return true; // Word found\n        }\n    }\n    return false; // Word not found\n}"
  },
  {
    "objectID": "05_Section_5.html#homework-tips",
    "href": "05_Section_5.html#homework-tips",
    "title": "Section 5",
    "section": "Homework tips",
    "text": "Homework tips\nHomework tips are available in the slide: Slide Section 5"
  },
  {
    "objectID": "05_Section_5.html#next-week",
    "href": "05_Section_5.html#next-week",
    "title": "Section 5",
    "section": "Next Week",
    "text": "Next Week\nFor the following section, we will discuss:\n\nPython!\n\n\\(\\,\\)"
  },
  {
    "objectID": "06_Section_6.html#this-week",
    "href": "06_Section_6.html#this-week",
    "title": "Section 6",
    "section": "This Week",
    "text": "This Week\nHappy New Year! In this section, we will discuss:\n\nPython"
  },
  {
    "objectID": "06_Section_6.html#slides",
    "href": "06_Section_6.html#slides",
    "title": "Section 6",
    "section": "Slides",
    "text": "Slides\nSlides deck are available here: Slide Section 6\nWalkthrough code is available at Code walkthrough"
  },
  {
    "objectID": "06_Section_6.html#section-practice-problems",
    "href": "06_Section_6.html#section-practice-problems",
    "title": "Section 6",
    "section": "Section Practice Problems",
    "text": "Section Practice Problems\n\nSection Problem 1\nTask\nWrite a Python function that takes a string as input and returns the reversed string. This problem will help students get accustomed to string manipulation in Python, which is significantly different from C due to Python’s high-level string handling capabilities.\n\nDefine a function reverse_string which takes a single parameter, a string.\nThe function should return a new string which is the reverse of the input string.\nDo not use any built-in Python functions or slicing for reversing the string. Implement it using a loop to mimic the manual string manipulation they might be used to in C.\n\nSample Input and Output:\nInput: “hello”\nOutput: “olleh”\nInput: “Python”\nOutput: “nohtyP”\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy the code at here\n\n\n\n\n\n\n\n\nTips\n\n\n\n\n\n\nYou might start by initializing an empty string that will store the reversed string.\nIterate over the input string in reverse order (you can use a loop for this) and concatenate each character to the empty string.\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSolution 1\ndef reverse_string(input_string):\n    # Initialize an empty string to store the reversed string\n    reversed_string = \"\"\n\n    # Iterate over the input_string in reverse order\n    for char in input_string[::-1]:\n        # Concatenate each character to reversed_string\n        reversed_string += char\n\n    # Return the reversed string\n    return reversed_string\nSolution 2\ndef reverse_string(input_string):\n    # Initialize an empty string to store the reversed string\n    reversed_string = \"\"\n\n    # Iterate over the input_string in reverse order\n    for i in range(len(input_string) - 1, -1, -1):\n        # Concatenate each character to reversed_string\n        reversed_string += input_string[i]\n\n    # Return the reversed string\n    return reversed_string\n\n\n\n\n\nSection Problem 2\nTask\nWrite a Python program that can implement two functions: match_dna and contains_strand.\n\nmatch_dna should take a dictionary of people with their DNA sequences and a DNA sequence to be matched. It returns the person’s name if a match is found or “No match found” otherwise.\ncontains_strand should take an individual’s DNA sequence and a DNA strand to search for. It returns True if the strand is found within the sequence and False otherwise.\n\nSample Input and Output:\nDNA Sequence: “CTGACTGAACTGACCTGA”, Strand: “ACTGA”\nOutput: True\nDNA Sequence: “TCCAGTCCAGTCCAG”, Strand: “ACGT”\nOutput: False\nDemo\nWill be shown in section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy the code at here\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSolution 1:\ndef match_dna(people_dna, sample_dna):\n    for name, dna_sequence in people_dna.items():\n        if dna_sequence == sample_dna:\n            return name\n    return \"No match found\"\n\ndef contains_strand(dna_sequence, strand):\n    return strand in dna_sequence\nSolution 2\ndef match_dna(people_dna, sample_dna):\n    matches = [name for name, dna in people_dna.items() if dna == sample_dna]\n    return matches[0] if matches else \"No match found\"\n\ndef contains_strand(dna_sequence, strand):\n    for i in range(len(dna_sequence) - len(strand) + 1):\n        if dna_sequence[i:i+len(strand)] == strand:\n            return True\n    return False"
  },
  {
    "objectID": "06_Section_6.html#homework-tips",
    "href": "06_Section_6.html#homework-tips",
    "title": "Section 6",
    "section": "Homework tips",
    "text": "Homework tips\nHomework tips are available in the slide: Slide Section 6"
  },
  {
    "objectID": "06_Section_6.html#next-week",
    "href": "06_Section_6.html#next-week",
    "title": "Section 6",
    "section": "Next Week",
    "text": "Next Week\nFor the following section, we will discuss:\n\nSQL!\n\n\\(\\,\\)"
  },
  {
    "objectID": "08_Section_8.html#this-week",
    "href": "08_Section_8.html#this-week",
    "title": "Section 8",
    "section": "This Week",
    "text": "This Week\nIn this section, we will discuss:\n\nHTML\nCSS\nJavascript"
  },
  {
    "objectID": "08_Section_8.html#slides",
    "href": "08_Section_8.html#slides",
    "title": "Section 8",
    "section": "Slides",
    "text": "Slides\nSlides deck are available here: Slide Section 8"
  },
  {
    "objectID": "08_Section_8.html#section-practice-problems",
    "href": "08_Section_8.html#section-practice-problems",
    "title": "Section 8",
    "section": "Section Practice Problems",
    "text": "Section Practice Problems\n\nSection Problem 1\nBackground\nYou are tasked with creating a web page for an upcoming educational conference. The page should allow attendees to register for the event by providing their name, email, and selecting the sessions they wish to attend. This exercise will help you practice structuring web pages with HTML, styling them with Bootstrap, and making them responsive.\nTask\n\nWithin the <body> of your HTML, construct a form that includes:\n\n\nA heading that says “Event Registration”.\nInput fields for the attendee’s name and email.\nCheckboxes for session selection (e.g., “Session 1: Introduction to HTML”, “Session 2: Advanced CSS”, “Session 3: Javascript Fundamentals”).\nA ‘Register’ button to submit the form.\n\n\nUse Bootstrap to style your form, margins and make sure it is responsive to laptop and phone view!\n(Optional) Try to add a style (a color or a color box) to your Event Registration heading!\n\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy the following to a new html file:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Registration</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <!-- TODO: Your code here-->\n    \n</body>\n\n</html>\n\n\n\n\n\n\n\n\nHints\n\n\n\n\n\nOn styling with bootstrap, using container and form group is very helpful! Read the documentation on the link!\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Registration</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h2><span style=\"background: linear-gradient(to right, rgb(7, 121, 222) 0%, rgb(20, 72, 140) 90%); -webkit-background-clip: text; color: transparent;\"> Event Registration</span></h2> \n        <form>\n            <div class=\"form-group\">\n                <label for=\"name\">Name</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Enter your name\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter your email\">\n            </div>\n            <div class=\"form-group\">\n                <label>Session Selection:</label>\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"session1\">\n                    <label class=\"form-check-label\" for=\"session1\">\n                        Session 1: Introduction to HTML\n                    </label>\n                </div>\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"session2\">\n                    <label class=\"form-check-label\" for=\"session2\">\n                        Session 2: Advanced CSS\n                    </label>\n                </div>\n                <div class=\"form-check\">\n                    <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"session2\">\n                    <label class=\"form-check-label\" for=\"session2\">\n                        Session32: Javascript Fundamentals\n                    </label>\n                </div>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n        </form>\n    </div>\n</body>\n</html>\n\n\n\n\n\n\nSection Problem 2\nBackground\nHaving created an Event Registration Page, the next step is to add interactive features to improve user experience. Specifically, you will provide immediate feedback on the form by displaying a message when the registration form is submitted. This exercise will introduce you to querying HTML elements and responding to events with JavaScript.\nTask\n\nQuery HTML Elements:\n\n\nUse document.querySelector to query the submit button.\nUse document.querySelectorAll to query all input fields.\n\n\nAdd an event listener to the form’s submit button that displays a simple message like “Thank you for registering!” This could be displayed in an alert or as a text element on the page.\n(Optional) As an extension, provide simple validation feedback. For example, check if the name and email fields are not empty before allowing the form to “submit”. Display a message if the validation fails.\n\nDemo\nWill be shown in section\n\n\n\n\n\n\nStarter Code\n\n\n\nYour original code or Copy the code at link will be sent in the groupchat link in section! :)\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWithout Optional include\n<script>\n    document.addEventListener('DOMContentLoaded', function () {\n        const submitButton = document.querySelector('button[type=\"submit\"]');\n        const inputs = document.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input[type=\"checkbox\"]');\n        \n        submitButton.addEventListener('click', function (event) {\n            alert(\"Thank you for registering!\");\n        });\n    });\n</script>\nInclude Optional\n<script>\n    document.addEventListener('DOMContentLoaded', function () {\n        const submitButton = document.querySelector('button[type=\"submit\"]');\n        const inputs = document.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input[type=\"checkbox\"]');\n        \n        submitButton.addEventListener('click', function (event) {\n            let isEmptyField = Array.from(inputs).some(input => input.type !== \"checkbox\" && input.value === \"\"); // Basic validation for text and email\n\n            if (isEmptyField) {\n                alert(\"Please fill in all fields.\");\n            } else {\n                alert(\"Thank you for registering!\");\n            }\n        });\n    });\n</script>"
  },
  {
    "objectID": "08_Section_8.html#publishing-your-website",
    "href": "08_Section_8.html#publishing-your-website",
    "title": "Section 8",
    "section": "Publishing your website",
    "text": "Publishing your website\nYou can always publish you website **for free* with Github - particularly Github Pages.\nThe steps are generally:\n\nSign up / Login your Github account\nCreate a new repository\nUpload your files (html, css and javascript)\nGo to Settings (top bar), under Pages (left hand bar), under Build & Deployment, under branch, choose master/(root)\nWait for 5-10 minutes, you can see your website publishing journey under the Action (on the top bar).\n\nSome tutorial that might be helpful:\n\nKhan Academy Tutorial\nYou Tube Tutorial\n\nSome Notes\n\nYou can add your custom domain name. Let’s say you bought a domain call “zadchin.com” and your want your website to be here instead of “zadchin.github.io/blahblah”. you can read the documentation here to see how to do that.\nThe website you publsih is technically public. Anyone in this world, with the link, can access the website.\nYou cannot publish a dynamic website (ie: website with database or using Python Flask) with Github Pages. For that, you will need paid services like AWS or Heroku. Heroku does let you publish Python Flask website with Github repositories, but they charge per visit/per utilities basis."
  },
  {
    "objectID": "08_Section_8.html#homework-tips",
    "href": "08_Section_8.html#homework-tips",
    "title": "Section 8",
    "section": "Homework tips",
    "text": "Homework tips\nHomework tips are available in the slide: Slide Section 8"
  },
  {
    "objectID": "08_Section_8.html#next-week",
    "href": "08_Section_8.html#next-week",
    "title": "Section 8",
    "section": "Next Week",
    "text": "Next Week\nFor the following section, we will discuss:\n\nPython Flask!\n\n\\(\\,\\)"
  },
  {
    "objectID": "09_Section_9.html#this-week",
    "href": "09_Section_9.html#this-week",
    "title": "Section 9",
    "section": "This Week",
    "text": "This Week\nIn this section, we will discuss:\n\nFlask\nJinja\nSQlite"
  },
  {
    "objectID": "09_Section_9.html#slides",
    "href": "09_Section_9.html#slides",
    "title": "Section 9",
    "section": "Slides",
    "text": "Slides\nSlides deck are available here: Slide Section 9"
  },
  {
    "objectID": "09_Section_9.html#section-practice-problems",
    "href": "09_Section_9.html#section-practice-problems",
    "title": "Section 9",
    "section": "Section Practice Problems",
    "text": "Section Practice Problems\n\nSection Problem 1\nBackground\nYou are tasked with implementing a background task within the Flask application that records each login attempt. This record should include the username, and the result of the attempt (success or failure). For simplicity, these records can be stored in a simple text file or a more sophisticated solution like a database, depending on the student’s level of experience.\nTask\n\nWithin login function in app.py of your HTML, construct a form that includes:\n\n\n(Done) Check if the user has login, yes - return template welcome.html\nIf method == POST\n\nget username and password\nif match, redirect to welcome.html\nelse flash('Invalid username or password')\n\nelse (If method == GET)\n\nredirect to login.html\n\n\nDemo\nDemo in Section\n\n\n\n\n\n\nStarter Code\n\n\n\nCopy the code at here\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWill be released after section! :)"
  },
  {
    "objectID": "09_Section_9.html#homework-tips",
    "href": "09_Section_9.html#homework-tips",
    "title": "Section 9",
    "section": "Homework tips",
    "text": "Homework tips\nStart Early this week! This problem set is very long and complicated!\nHomework tips are available in the slide: Slide Section 9\nRefer to Slide 60! Really helpful for your finance problem set! :)"
  },
  {
    "objectID": "09_Section_9.html#next-week",
    "href": "09_Section_9.html#next-week",
    "title": "Section 9",
    "section": "Next Week",
    "text": "Next Week\nFor the following section, we will discuss:\n\nThis is our last section! It has been my pleasure teaching y’all. :)\n\n\\(\\,\\)"
  }
]