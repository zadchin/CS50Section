# Section 5 {.unnumbered}

Last Updated: 23 Dec 2023

Date: 23 Dec 2023


## This Week
In this section, we will discuss:

- Linked List
- Hash Tables
- Queue, Stack


## Slides

Slides deck are available here: [Slide Section 5](https://docs.google.com/presentation/d/19kqeQEtSjAVwXkOuCCYKac1H0UnETvxmbBPjXi74EF0/edit?usp=sharing)

## Section Practice Problems

### Section Problem 1

**Background**

Linked lists are a fundamental data structure in computer science, often used to store sequences of elements. They consist of nodes, where each node contains a piece of data and a pointer to the next node in the list. This structure allows for efficient insertion and deletion of elements. Understanding pointers is crucial for managing linked lists, as they are used to navigate and modify the list structure.

**Task**

Create a function that reverses a singly linked list. The list is represented by a `struct` named `node`, which contains an integer `number` and a pointer to the next node. Your task is to write a function `void reverse(node **head)` that takes a pointer to the head of the list and reverses the order of the nodes. The challenge is to manipulate the pointers in each node to reverse the order without creating any new nodes or losing any existing ones.

**Demo**

Demo in Section

:::{.callout-note appearance="simple"}

## Starter Code

Copy the code at [here](https://github.com/zadchin/CS50_Practice-Question/blob/master/section5/Q1.c)

:::

::: {.callout-tip collapse="true" appearance="simple"}

## Tips & Pseudocode

**Example in Words**

Imagine a simple linked list: 1 -> 2 -> 3 -> null

1. Start: `prev` = null, `current` = 1, `next` = null

2. First Iteration:
   - next points to 2 (saving link to next node)
   - Reverse link: 1 <- current, but next (2) -> 3
   - Move prev to 1, current to 2 (advance pointers)
   - Now: null <- 1 <- current (2) -> 3

3. Second Iteration:
   - next points to 3
   - Reverse link: 2 <- current, but next (3) -> null
   - Move prev to 2, current to 3
   - Now: null <- 1 <- 2 <- current (3)

4. Final Iteration:
   - next is null (end of list)
   - Reverse link: 3 -> null
   - current becomes null, loop ends
   - Final list: null <- 1 <- 2 <- 3

The head of the list now points to 3, achieving the reversed list: 3 -> 2 -> 1 -> null

**Pseudocode**
```
1. Initialize three pointers: prev (null), current (head of the list), and next (null).

2. Loop while current is not null:
 - Set next to current->next (save the next node).
 - Redirect current->next to prev (reverse the link).
 - Move prev to current (advance prev up the list).
 - Move current to next (advance current up the list).
 
3. After the loop, set the head of the list to prev.
```
:::

::: {.callout-tip collapse="true" appearance="simple"}

## Solution 

```
void reverse(node **head) {
    node *prev = NULL;
    node *current = *head;
    node *next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}
```

:::


### Section Problem 2

**Background**

Hash tables are powerful data structures that allow for efficient data retrieval. They map keys to values, using a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. This exercise focuses on understanding how to search for items in a hash table, an essential operation known as a lookup.

**Task**

Write a function, `bool lookup(char* word, node* hashtable[], int size)`, that searches for a given word in a hash table. The hash table is represented as an array of linked lists `(node* hashtable[])`, and `size` is the number of buckets in the table. The function should return `true` if the word is found and `false` otherwise.

**Demo**

Will be shown in section


:::{.callout-note appearance="simple"}

## Starter Code

Copy the code at [here](https://github.com/zadchin/CS50_Practice-Question/blob/master/section5/Q2.c)

:::



::: {.callout-tip collapse="true" appearance="simple"}

## Pseudocode

```
1. Hash the Word using the provided hash function: Use the hash function on the input word to determine the index in the hashtable.

2. Traverse the Linked List: At the calculated index, traverse the linked list attached to that bucket.
   - If the current node's word matches the input word, return True.
   - If not, move to the next node in the list.

3. Word Not Found: If the end of the list is reached without finding the word, return False.
```
:::

::: {.callout-tip collapse="true" appearance="simple"}

## Solution 

Solution 1:

```
bool lookup(const char* word, node* hashtable[]) {
    unsigned int index = hash(word);
    node *cursor = hashtable[index];
    while (cursor != NULL) {
        if (strcmp(cursor->word, word) == 0) {
            return true;
        }
        cursor = cursor->next;
    }
    return false;
}
```

Solution 2

```
bool lookup(const char* word, node* hashtable[]) {
    unsigned int index = hash(word);

    // Use a for loop to traverse the linked list
    for (node *cursor = hashtable[index]; cursor != NULL; cursor = cursor->next) {
        if (strcmp(cursor->word, word) == 0) {
            return true; // Word found
        }
    }
    return false; // Word not found
}
```

:::


## Homework tips

Homework tips are available in the slide: [Slide Section 5](https://docs.google.com/presentation/d/19kqeQEtSjAVwXkOuCCYKac1H0UnETvxmbBPjXi74EF0/edit?usp=sharing)



## Next Week
For the following section, we will discuss:

- Python!

$\,$
